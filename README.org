+TITLE: Emacs Configuration File
#+AUTHOR: slow-is-fast
#+DATE: 2019-10-14
#+STARTUP: content

* Bootstrap

** Defaults


#+BEGIN_SRC emacs-lisp
  (defconst *is-a-mac* (eq system-type 'darwin))    ; Check if is mac os s
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show matching char
  (electric-pair-mode 1)                            ; Insert matching character

  (when window-system
    (blink-cursor-mode 0)                           ; Disable the cursor blinking
    (scroll-bar-mode 0)                             ; Disable the scroll bar
    (tool-bar-mode 0)                               ; Disable the tool bar
    (menu-bar-mode 0)                               ; Disable the menu bar
    (tooltip-mode 0))                               ; Disable the tooltips


  (setq-default
   make-backup-files nil                            ; No backup files
   line-spacing 5                                   ; Line Spacing
   auto-window-vscroll nil                          ; Lighten vertical scroll
;   confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
   cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
   fill-column 80                                   ; Set width for automatic line breaks
   indent-tabs-mode nil                             ; Stop using tabs to indent
   tab-width 4                                      ; Set width for tabs
   inhibit-startup-screen t                         ; Disable start-up screen
   mouse-yank-at-point t                            ; Yank at point rather than pointer
   ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   scroll-margin 10                                 ; Add a margin when scrolling vertically
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                    ; End a sentence after a dot and a space
   show-trailing-whitespace nil                     ; Display trailing whitespaces
   split-height-threshold nil                       ; Disable vertical window splitting
   split-width-threshold nil                        ; Disable horizontal window splitting
   uniquify-buffer-name-style 'forward              ; Uniquify buffer names
   window-combination-resize t                      ; Resize windows proportionally
   ring-bell-function 'ignore                       ; Disable annoying bell sound
   x-stretch-cursor t)                              ; Stretch cursor to the glyph width

  (global-hl-line-mode 1)                           ; Highlight the current line



#+END_SRC    


* Packages

*** straight.el
[repo](https://github.com/raxod502/straight.el)

#+BEGIN_SRC emacs-lisp

(setq straight-recipes-gnu-elpa-use-mirror t
      straight-repository-branch           "develop"
      straight-vc-git-default-clone-depth  1)

(defvar bootstrap-version)

(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-register-package
   '(magit :type git :host github
  	 :repo "magit/magit"
  	 :depth full))

(straight-register-package
   '(git-commit :type git :host github
  	      :repo "magit/magit"
  	      :depth full))

(straight-use-package 'use-package)

(use-package general
  :straight t
  :init
  (defalias 'gsetq #'general-setq)
  (defalias 'gsetq-local #'general-setq-local)
  (defalias 'gsetq-default #'general-setq-default))
  ; (use-package 'use-package-ensure')
  ; (require 'use-package-ensure)
  ; (setq use-package-always-ensure t)                ; Always apply :ensure t - Option when declaring a package via use-package
#+END_SRC



* GUI

*** Frames
#+BEGIN_SRC emacs-lisp
  (use-package maxframe
    :straight t
    )
  (add-hook 'window-setup-hook 'maximize-frame t)
  (set-face-attribute 'default nil :font "Fira Code-14")
#+END_SRC


*** Themes

The Doom-Themes are kind of the state of the art in stylish and modern Emacs-Themes. I'm using ~doom-molokai~ for consistency with my setup.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :straight t
    :init
     ;; Global settings (defaults)
    (setq doom-themes-enable-bold t                 ; if nil, bold is universally disabled
          doom-themes-enable-italic t)              ; if nil, italics is universally disabled
    :config
    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-peacock t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)

    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC




*** Org-Bullets

The ~org-bullets~-package replaces the standard Stars of headings in org-mode by Unicode-Bullets.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  	:straight t
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Modernizing setup

The following packages just inherently make emacs look more polished and modern.

**** all-the-icons

Inserts Unicode symbols in locations like the menubar or the dashboard

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
  :init (setq inhibit-compacting-font-caches t)
  :straight t)
#+END_SRC

**** doom-modeline

Better Modeline that fits well with the theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
  	:straight t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

**** dashboard

A welcome screen that shows startup-info and other stuff

#+BEGIN_SRC emacs-lisp

  (use-package diminish
  :demand   t
  :straight t)

  (use-package page-break-lines
  :straight t
  :hook ((after-init . global-page-break-lines-mode))
  :diminish page-break-lines-mode)
  
  (straight-use-package 'org-plus-contrib)

  (use-package org
  :straight org-plus-contrib)

  (use-package projectile
    :defer    t
    :straight t
    :diminish
    :bind-keymap ("C-c C-p" . projectile-command-map)
    :hook ((after-init . projectile-global-mode))
    :config (gsetq projectile-indexing-method      'hybrid
             projectile-require-project-root 'prompt
             projectile-project-root-files-top-down-recurring
             (append '("compile_commands.json"
           ".cquery")
               projectile-project-root-files-top-down-recurring)))


   (use-package dashboard
   	 :straight t
     :init
     (setq dashboard-startup-banner 1)
     (setq dashboard-center-content nil)
     (setq dashboard-show-shortcuts t)
     (setq dashboard-/set-heading-icons t)
     (setq dashboard-set-file-icons t)
     (setq dashboard-set-init-info t)
     (setq show-week-agenda-p t)
     (setq dashboard-org-agenda-categories '("Tasks" "Appointments"))

     :config
    (dashboard-setup-startup-hook))
#+END_SRC

* Editor enhancements

*** Ivy

The following packages are a plug-in-replacement for standard Emacs-Functions, that deal with things outside the buffer-window like finding a string in the buffer, opening an external file, switching buffers or executing commands.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
  	:straight t
    :bind ("C-s" . swiper))

  (use-package ivy
  	:straight t
    :init
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
    :config
    (ivy-mode 1)
    :bind
    (:map ivy-minibuffer-map
          ("RET" . ivy-alt-done)))

  (use-package counsel
  	:straight t
    :init
    (setq counsel-find-file-ignore-regexp "\\(?:\\`[.]\\)")
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file))
#+END_SRC

*** Rainbow-delimiters

When working with a lot of brackets, parens and alike you can quickly loose track over which paren is the correct one. ~Rainbow-delimiters~ solves this problem, by coloring every paren-pair individually.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
  	:straight t
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+END_SRC


** Snippets and Autocomplete

*** Yasnippet

Yasnippet is a package, that let's you insert larger Code-Snippets by typing a prefix and evaluating it with <TAB>.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
  	:straight t
    :hook
    (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets
  	:straight t)
#+END_SRC


*** Company-Mode

Company-Mode is a Completion-Frontend

#+BEGIN_SRC emacs-lisp
  (use-package company
  	:straight t
    :bind
    (:map company-active-map
          ("TAB" . company-complete-selection)
          ([tab] . company-complete-selection)
          ("<right>" . company-complete-common)
          ("C-n" . 'company-select-next)
          ("C-p" . 'company-select-previous))
    :hook
    (prog-mode . company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t))
#+END_SRC



* Version Control

#+BEGIN_SRC emacs-lisp
(use-package magit
  :straight t
  :hook ((magit-popup-mode-hook . no-trailing-whitespace))
  :init (gsetq magit-diff-refine-hunk t)
  )

#+END_SRC
